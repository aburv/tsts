name: Worflow Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Set Git SHA as tag
        id: set-tag
        run: |
          echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set failure message
        id: set-failure
        run: |
          echo "failure_message=Tag" >> $GITHUB_OUTPUT
  
  build-interface:
    needs: set-tag
    uses: ./.github/workflows/build_push_image.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      repo: ${{ vars.INTERFACE_REPO }}
      folder: ./app/web-interface
    secrets:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
  
  build-data:
    needs: set-tag
    uses: ./.github/workflows/build_push_image.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      repo: ${{ vars.DATA_REPO }}
      folder: ./app/server
    secrets:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
  
  dev-deploy-interface:
    needs: [set-tag, build-interface]
    uses: ./.github/workflows/deploy.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      service: interface
      environment: development
      repo: ${{ vars.INTERFACE_REPO }}
    secrets:
      ECS_CLUSTER: ${{ secrets.CLUSTER_NAME }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
  
  dev-deploy-data:
    needs: [set-tag, build-data]
    uses: ./.github/workflows/deploy.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      service: data
      environment: development
      repo: ${{ vars.DATA_REPO }}
    secrets:
      ECS_CLUSTER: ${{ secrets.CLUSTER_NAME }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  dev-set-failures:
    needs: [set-tag, build-interface, build-data, dev-deploy-interface, dev-deploy-data]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      failures: ${{ steps.set-failure.outputs.failures_json }}
    steps:
      - name: Set failures
        id: set-failure
        run: |
          FAILURE_JSON=$(jq -c -n \
            --arg tagging "${{ needs.set-tag.outputs.failure_message }}" \
            --arg build-interface "${{ needs.build-interface.outputs.failure_message }}" \
            --arg build-data "${{ needs.build-data.outputs.failure_message }}" \
            --arg dev-deploy-interface "${{ needs.dev-deploy-interface.outputs.failure_message }}" \
            --arg dev-deploy-data "${{ needs.dev-deploy-data.outputs.failure_message }}" \
            '{tagging: $tagging, build-interface:$build-interface, build-data:$build-data, \ 
            dev-deploy-interface:$dev-deploy-interface, dev-deploy-data:$dev-deploy-data}'
          )
          
          echo "failures_json=$FAILURE_JSON" >> $GITHUB_OUTPUT

  dev-notify:
    needs: [set-tag, dev-set-failures]
    if: always()
    uses: ./.github/workflows/notify.yml
    with:
      sha: ${{ needs.set-tag.outputs.tag }}
      failures_json: ${{ needs.dev-set-failures.outputs.failures }}
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }}

  wait-for-approval:
    needs: [set-tag, dev-deploy-data, dev-deploy-interface]
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: prod-approval
    runs-on: ubuntu-latest
    steps:
      - name: Awaiting approval
        run: echo "This workflow is paused until production deployment is approved."

  build-site:
    needs: [set-tag, wait-for-approval]
    uses: ./.github/workflows/build_push_image.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      repo: ${{ vars.SITE_REPO }}
      folder: ./site
    secrets:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy-site:
    needs: [set-tag, build-site]
    uses: ./.github/workflows/deploy.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      service: site
      environment: production
      repo: ${{ vars.SITE_REPO }}
    secrets:
      ECS_CLUSTER: ${{ secrets.CLUSTER_NAME }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  prod-deploy-interface:
    needs: [set-tag, wait-for-approval]
    uses: ./.github/workflows/deploy.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      service: interface
      environment: production
      repo: ${{ vars.INTERFACE_REPO }}
    secrets:
      ECS_CLUSTER: ${{ secrets.CLUSTER_NAME }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
  
  prod-deploy-data:
    needs: [set-tag, wait-for-approval]
    uses: ./.github/workflows/deploy.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      service: data
      environment: production
      repo: ${{ vars.DATA_REPO }}
    secrets:
      ECS_CLUSTER: ${{ secrets.CLUSTER_NAME }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  set-failures:
    needs: [set-tag, build-interface, build-data, dev-deploy-interface, dev-deploy-data]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      failures: ${{ steps.set-failure.outputs.failures_json }}
    steps:
      - name: Set failures
        id: set-failure
        run: |
          FAILURE_JSON=$(jq -c -n \
            --arg build-site "${{ needs.build-interface.outputs.failure_message }}" \
            --arg deploy-site "${{ needs.dev-deploy-interface.outputs.failure_message }}" \
            --arg prod-deploy-interface "${{ needs.prod-deploy-interface.outputs.failure_message }}" \
            --arg prod-deploy-data "${{ needs.prod-deploy-data.outputs.failure_message }}" \
            '{tagging: $tagging, build-site:$build-site, deploy-site:$deploy-site, \ 
            prod-deploy-interface:$prod-deploy-interface, prod-deploy-data:$prod-deploy-data}'
          )
          
          echo "failures_json=$FAILURE_JSON" >> $GITHUB_OUTPUT

  notify:
    needs: [set-tag, set-failures]
    if: always()
    uses: ./.github/workflows/notify.yml
    with:
      sha: ${{ needs.set-tag.outputs.tag }}
      failures_json: ${{ needs.set-failures.outputs.failures }}
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }}
